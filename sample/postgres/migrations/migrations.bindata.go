// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 1550026905_baseline.down.sql (85B)
// 1550026905_baseline.up.sql (516B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1550026905_baselineDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\x8e\xcf\xc9\x4f\xcf\xcc\x8b\x2f\xcd\xcc\x4b\x49\xad\xd0\x81\x8a\x65\xa6\x40\x05\xac\xb9\xc0\x3a\x43\x1c\x9d\x7c\x5c\xd1\x75\x5a\x03\x02\x00\x00\xff\xff\x4e\xe1\xfe\xd1\x55\x00\x00\x00")

func _1550026905_baselineDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1550026905_baselineDownSql,
		"1550026905_baseline.down.sql",
	)
}

func _1550026905_baselineDownSql() (*asset, error) {
	bytes, err := _1550026905_baselineDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1550026905_baseline.down.sql", size: 85, mode: os.FileMode(0644), modTime: time.Unix(1572089920, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0x8d, 0x22, 0xf8, 0x72, 0x6d, 0x9f, 0xaa, 0xf, 0x6b, 0x5a, 0xa2, 0xd5, 0xb5, 0xc2, 0xd8, 0x2b, 0x98, 0xef, 0x59, 0x34, 0x62, 0x39, 0x22, 0x9c, 0xed, 0x4d, 0xd8, 0x34, 0x3e, 0xf4, 0xf8}}
	return a, nil
}

var __1550026905_baselineUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xd1\xcf\x4b\xc3\x30\x1c\x05\xf0\x7b\xfe\x8a\x77\x6c\xc1\xc3\x3c\xef\x94\x6d\xdf\xba\x60\x9a\xcc\xf4\x5b\xdd\xbc\x94\x62\x82\x04\xa4\x1d\xcd\xca\xfc\xf3\x65\xd5\x09\xc2\xf0\xd7\x3b\x26\x8f\x0f\xe1\x65\xe9\x48\x32\x81\xe5\x42\x13\x54\x01\x63\x19\xb4\x55\x15\x57\x18\x53\x18\x12\x32\x01\x44\x8f\x73\x94\x61\xba\x21\x87\x9f\x73\x92\x4c\xad\x35\x36\x4e\x95\xd2\xed\x70\x4b\xbb\x2b\x01\xbc\xf4\xcf\xb1\x7b\xaf\xdc\x4b\xb7\x5c\x4b\x97\x5d\xcf\x66\xf9\xef\xb0\x13\xb0\x6f\x53\x3a\xf6\x83\xff\x37\xf0\x34\x84\xf6\x10\x7c\xd3\x1e\xc0\xaa\xa4\x8a\x65\xb9\xc1\x83\xe2\xb5\xad\x79\x3a\xc1\xa3\x35\x84\x15\x15\xb2\xd6\x8c\xae\x3f\x66\xf9\x17\x20\xa6\x26\x8d\xfb\x30\x00\x58\x58\xab\x49\x9a\xcf\x72\x21\x75\x45\xdf\xbe\x40\xe4\x73\x21\x3e\x66\xaf\x8d\xba\xab\x09\xca\xac\x68\x7b\x69\xfd\x26\xfa\x66\x8c\x9d\x0f\xaf\x02\xb0\xe6\xfc\x25\xd1\xff\xc5\x98\x06\xbf\xc4\x4c\x17\xf9\x5c\xbc\x05\x00\x00\xff\xff\x15\xd6\xda\xa3\x04\x02\x00\x00")

func _1550026905_baselineUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1550026905_baselineUpSql,
		"1550026905_baseline.up.sql",
	)
}

func _1550026905_baselineUpSql() (*asset, error) {
	bytes, err := _1550026905_baselineUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1550026905_baseline.up.sql", size: 516, mode: os.FileMode(0644), modTime: time.Unix(1572089990, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2c, 0xb1, 0xa4, 0x57, 0xe, 0x93, 0xf6, 0x46, 0x4c, 0xaf, 0xb1, 0x86, 0xc2, 0x85, 0x3e, 0x91, 0xa8, 0x3f, 0xa9, 0x6d, 0xb3, 0xba, 0x33, 0xa2, 0x5, 0xa3, 0x27, 0xfa, 0x36, 0xba, 0xea, 0x7e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1550026905_baseline.down.sql": _1550026905_baselineDownSql,
	"1550026905_baseline.up.sql":   _1550026905_baselineUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1550026905_baseline.down.sql": &bintree{_1550026905_baselineDownSql, map[string]*bintree{}},
	"1550026905_baseline.up.sql":   &bintree{_1550026905_baselineUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
