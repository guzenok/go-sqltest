package postgres
// Code generated by SqlMockGen. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"errors"
	"testing"
	"time"
	"github.com/DATA-DOG/go-sqlmock"
)

func TestStoreUsers(t *testing.T) {
	db, err := testStoreUsersSqlMock()
	if err != nil {
		t.Fatal(err)
	}
	testStoreUsers(t, db)
}

func testStoreUsersSqlMock() (*sql.DB, error) {
	opt := sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual)
	db, mock, err := sqlmock.New(opt)
	if err != nil {
		return nil, err
	}

	mock.ExpectBegin()
	mock.ExpectQuery(`
INSERT INTO users (id, login, password, is_super) 
VALUES ($1, $2, $3, $4)
RETURNING created_at;`).WithArgs(
		driver.Value(1),
		driver.Value("user01"),
		driver.Value("first-P"),
		driver.Value(false),
	).WillReturnError(errors.New("pq: duplicate key value violates unique constraint \"users_pkey\""))
	mock.ExpectRollback()
	mock.ExpectBegin()
	mock.ExpectExec(`
DELETE FROM users 
WHERE id = $1;`).WithArgs(
		driver.Value(1),
	).WillReturnResult(sqlmock.NewResult(0, 1))
	mock.ExpectCommit()
	mock.ExpectBegin()
	mock.ExpectQuery(`
INSERT INTO users (id, login, password, is_super) 
VALUES ($1, $2, $3, $4)
RETURNING created_at;`).WithArgs(
		driver.Value(1),
		driver.Value("user01"),
		driver.Value("second-P"),
		driver.Value(false),
	).WillReturnRows(func() *sqlmock.Rows {
		rr := sqlmock.NewRows([]string{"created_at"})
		rr.AddRow(time.Unix(1574696263, 519242000))
		return rr
	}())
	mock.ExpectCommit()
	mock.ExpectBegin()
	mock.ExpectExec(`
UPDATE users SET password = $1 
WHERE id = $2;`).WithArgs(
		driver.Value("third-P"),
		driver.Value(1),
	).WillReturnResult(sqlmock.NewResult(0, 1))
	mock.ExpectCommit()
	mock.ExpectQuery(`
SELECT id, password, created_at, is_super
FROM users
WHERE login = $1
LIMIT 1;`).WithArgs(
		driver.Value("user01"),
	).WillReturnRows(func() *sqlmock.Rows {
		rr := sqlmock.NewRows([]string{"id", "password", "created_at", "is_super"})
		rr.AddRow(1, "third-P", time.Unix(1574696263, 519242000), false)
		return rr
	}())
	mock.ExpectQuery(`
SELECT login, password, created_at, is_super
FROM users
WHERE id = $1
LIMIT 1;`).WithArgs(
		driver.Value(1),
	).WillReturnRows(func() *sqlmock.Rows {
		rr := sqlmock.NewRows([]string{"login", "password", "created_at", "is_super"})
		rr.AddRow("user01", "third-P", time.Unix(1574696263, 519242000), false)
		return rr
	}())

	return db, nil
}


