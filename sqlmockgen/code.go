package main

import (
	"os"
	"text/template"

	"github.com/guzenok/go-sqltest/sqlmockgen/generator"
	"github.com/guzenok/go-sqltest/sqlmockgen/model"
)

type Descr struct {
	ImportPath      string
	Pkg             *model.Package
	CopyrightHeader string
	DbUrl           string
	OutputPath      string

	SpecTestFuncName string
	GeneratorPath    string
	ModelPath        string
}

func newDescr() *Descr {
	return &Descr{
		GeneratorPath:    generator.ImportPath,
		ModelPath:        model.ImportPath,
		SpecTestFuncName: "TestGeneratorEntryPoint",
	}
}

func program(dsc *Descr, f *os.File) (entrypoint string, err error) {
	entrypoint = dsc.SpecTestFuncName
	err = codeTemplate.Execute(f, dsc)
	return
}

var codeTemplate = template.Must(
	template.New("program").Parse(code),
)

// code imports specialized functions and runs generator.
var code = `
package {{.Pkg.Name}}

import (
	"fmt"
	"testing"

	generator {{printf "%q" .GeneratorPath}}
	model {{printf "%q" .ModelPath}}
)

func {{.SpecTestFuncName}}(t *testing.T) {
	const copyright = ` + "`{{.CopyrightHeader}}`" + `
	
	tests := map[string]model.TestDbFunc{
		{{range $_, $f := .Pkg.Tests}}
			{{printf "%q" $f}}: {{$f}},
		{{end}}
	}

	g := generator.New()
	code := g.GenCode(t, {{printf "%q" .DbUrl}}, {{.Pkg.Init}}, tests)
	if t.Failed() {
		// return
	}

	f, close, err := generator.NewFile({{printf "%q" .OutputPath}})
	if err != nil {
		t.Fatal(err)
	}
	defer close()
	
	fmt.Fprintln(f, "package {{.Pkg.Name}}")
	fmt.Fprintln(f, "// Code generated by SqlMockGen. DO NOT EDIT.")
	fmt.Fprintln(f, "")
	
	if copyright != "" {
		fmt.Fprintln(f, copyright)
		fmt.Fprintln(f, "")
	}
	
	fmt.Fprintln(f, string(code))
}
`
