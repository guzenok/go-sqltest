package generator

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
	"log"
	"strings"
	"unicode"

	"github.com/guzenok/go-sqltest/sqlmockgen/model"
)

const ImportPath = "github.com/guzenok/go-sqltest/sqlmockgen/generator"

type (
	InitDataFunctions map[string]model.InitDataFunc
	SqlsDictFunctions map[string]model.SqlsDictFunc
)

func WriteCode(
	pkgName string,
	inits InitDataFunctions,
	sqls SqlsDictFunctions,
	out io.Writer,
) error {

	for n, f := range sqls {
		ss, err := f()
		fmt.Fprintf(out, "%s() returns ", n)
		if err != nil {
			fmt.Fprintf(out, "error %s\n", err)
		}
		fmt.Fprintf(out, "%v\n", ss)
	}

	return nil
}

type generator struct {
	buf             bytes.Buffer
	indent          string
	copyrightHeader string
	srcPackage      string
}

func (g *generator) p(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, g.indent+format+"\n", args...)
}

func (g *generator) in() {
	g.indent += "\t"
}

func (g *generator) out() {
	if len(g.indent) > 0 {
		g.indent = g.indent[0 : len(g.indent)-1]
	}
}

func removeDot(s string) string {
	if len(s) > 0 && s[len(s)-1] == '.' {
		return s[0 : len(s)-1]
	}
	return s
}

// sanitize cleans up a string to make a suitable package name.
func sanitize(s string) string {
	t := ""
	for _, r := range s {
		if t == "" {
			if unicode.IsLetter(r) || r == '_' {
				t += string(r)
				continue
			}
		} else {
			if unicode.IsLetter(r) || unicode.IsDigit(r) || r == '_' {
				t += string(r)
				continue
			}
		}
		t += "_"
	}
	if t == "_" {
		t = "x"
	}
	return t
}

func (g *generator) Generate(pkg *model.Package, pkgName string, outputPackagePath string) error {
	if pkgName != pkg.Name {
		outputPackagePath = ""
	}

	if g.copyrightHeader != "" {
		lines := strings.Split(g.copyrightHeader, "\n")
		for _, line := range lines {
			g.p("// %s", line)
		}
		g.p("")
	}

	g.p("// Code generated by MockGen. DO NOT EDIT.")
	g.p("// Source: %v", g.srcPackage)

	g.p("")

	return nil
}

// Output returns the generator's output, formatted in the standard Go style.
func (g *generator) Output() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		log.Fatalf("Failed to format generated source code: %s\n%s", err, g.buf.String())
	}
	return src
}
